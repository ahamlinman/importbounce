AWSTemplateFormatVersion: 2010-09-09

Description: Redirect server for custom Go import paths

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the redirector to host
  ValidationDomainName:
    Type: String
    Description: Domain name to use for email-based certificate validation
  ConfigFilePath:
    Type: String
    Description: Path to the TOML config file in the S3 bucket
    Default: importbounce.toml

Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Redirect server for custom Go import paths
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: go1.x
      Code: ./lambda-dist
      Handler: importbounce
      Environment:
        Variables:
          IMPORTBOUNCE_CONFIG_URL: !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
      TracingConfig:
        Mode: Active

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: ConfigBucketGetObject
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${ConfigBucket.Arn}/*'

  LambdaFunctionRestApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:invokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*'

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Redirect server for custom Go import paths
      Name: !Ref AWS::StackName

  RestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{proxy+}'

  RestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RestApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RestApiMethod
    Properties:
      RestApiId: !Ref RestApi

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment

  RestApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref RestApiCertificate

  RestApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId: !Ref RestApi
      DomainName: !Ref RestApiDomainName
      Stage: !Ref RestApiStage

  RestApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      # TODO: Use DNS instead
      ValidationMethod: EMAIL
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref ValidationDomainName

Outputs:
  ConfigS3URI:
    Description: The location in S3 to which the TOML configuration should be uploaded
    Value: !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
  ApiDomain:
    Description: The CNAME to which the domain name should point
    Value: !GetAtt RestApiDomainName.RegionalDomainName
