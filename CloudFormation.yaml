AWSTemplateFormatVersion: 2010-09-09

Description: Redirect server for custom Go import paths

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the redirector to host.
  ConfigFilePath:
    Type: String
    Description: Path to the TOML config file in the S3 bucket.
    Default: importbounce.toml
  TracingEnabled:
    Type: String
    Description: If 'true', turn on X-Ray tracing for all supported resources.
    Default: 'true'
  ConfigFileNoSSL:
    Type: String
    Description: >-
      If 'true', disable SSL when requesting the TOML config file from S3. This
      significantly speeds up Lambda cold starts and enables the smallest
      possible container images, at the cost of reduced security. This must be
      'true' when using the standard importbounce deployment script, which
      produces a container image without any TLS roots.
    Default: 'true'
  ImageUri:
    Description: The container image for the Lambda function to run.
    Type: String

Conditions:
  HasTracingEnabled: !Equals [!Ref TracingEnabled, 'true']
  HasConfigFileNoSSL: !Equals [!Ref ConfigFileNoSSL, 'true']

Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Description: Redirect server for custom Go import paths
      Role: !GetAtt FunctionRole.Arn
      Architectures: [arm64]
      PackageType: Image
      Code:
        ImageUri: !Ref ImageUri
      Environment:
        Variables:
          GO_API_HOST: !Sub 'https://${DomainName}'
          IMPORTBOUNCE_CONFIG_URL: !If
            - HasConfigFileNoSSL
            - !Sub 's3+nossl://${ConfigBucket}/${ConfigFilePath}'
            - !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
      TracingConfig:
        Mode: !If [HasTracingEnabled, Active, PassThrough]

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: ConfigBucketGetObject
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${ConfigBucket.Arn}/*'

  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt Function.Arn
      AuthType: NONE

  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Function.Arn
      Principal: '*'
      Action: lambda:InvokeFunctionUrl
      FunctionUrlAuthType: NONE

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: Function
            # The function URL is a proper https:// URL, but for CloudFront we
            # need to limit this to just the origin hostname. This is about the
            # best we can do with the currently available intrinsic functions.
            DomainName: !Select [2, !Split ['/', !GetAtt FunctionUrl.FunctionUrl]]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: Function
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

Outputs:
  ConfigS3URI:
    Description: The location in S3 to which the TOML configuration should be uploaded
    Value: !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
  ApiDomain:
    Description: The CNAME to which the domain name should point
    Value: !GetAtt CloudFrontDistribution.DomainName
