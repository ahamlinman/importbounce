AWSTemplateFormatVersion: 2010-09-09

Description: Redirect server for custom Go import paths

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the redirector to host.
  ConfigFilePath:
    Type: String
    Default: importbounce.toml
    Description: Path to the TOML config file in the S3 bucket.
  TracingEnabled:
    Type: String
    Default: 'true'
    Description: If 'true', turn on X-Ray tracing for all supported resources.
  ConfigFileNoSSL:
    Type: String
    Default: 'true'
    Description: >-
      If 'true', request the TOML config file from S3 without HTTPS. This speeds
      up Lambda cold starts and enables container images that omit TLS roots,
      like the image built by the standard importbounce deployment script.
      Mitigating factors for the reduced security include the fact that the S3
      request should not leave AWS internal networks when importbounce runs in
      AWS Lambda, and that the Go checksum database is likely to detect
      temporary spoofing of the config to point at modified code.
  CodeS3Bucket:
    Description: The S3 bucket containing the Lambda deployment package.
    Type: String
  CodeS3Key:
    Description: The S3 key of the Lambda deployment package.
    Type: String

Conditions:
  HasTracingEnabled: !Equals [!Ref TracingEnabled, 'true']
  HasConfigFileNoSSL: !Equals [!Ref ConfigFileNoSSL, 'true']

Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  OriginFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Redirect server for custom Go import paths
      Role: !GetAtt OriginFunctionRole.Arn
      Runtime: provided.al2
      Architectures: [arm64]
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Handler: bootstrap
      Environment:
        Variables:
          GO_API_HOST: !Sub 'https://${DomainName}'
          IMPORTBOUNCE_CONFIG_URL: !If
            - HasConfigFileNoSSL
            - !Sub 's3+nossl://${ConfigBucket}/${ConfigFilePath}'
            - !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
      TracingConfig:
        Mode: !If [HasTracingEnabled, Active, PassThrough]

  OriginFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: ConfigBucketGetObject
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub '${ConfigBucket.Arn}/*'

  OriginFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt OriginFunction.Arn
      AuthType: NONE

  OriginFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OriginFunction.Arn
      Principal: '*'
      Action: lambda:InvokeFunctionUrl
      FunctionUrlAuthType: NONE

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginFunctionUrlPermission
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: Function
            # The function URL is a proper https:// URL, but for CloudFront we
            # need to limit this to just the origin hostname. This is about the
            # best we can do with the currently available intrinsic functions.
            DomainName: !Select [2, !Split ['/', !GetAtt OriginFunctionUrl.FunctionUrl]]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: Function
          CachePolicyId: !Ref CloudFrontDefaultCachePolicy
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

  CloudFrontDefaultCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub '${AWS::StackName}-Default'
        Comment: !Sub 'Default cache policy for ${AWS::StackName}'
        DefaultTTL: 0
        MinTTL:  0
        MaxTTL: 31536000
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: whitelist # TODO: CloudFront does not yet support a better term.
            QueryStrings:
              - go-get
          EnableAcceptEncodingGzip: false

Outputs:
  ConfigS3URI:
    Description: The location in S3 to which the TOML configuration should be uploaded
    Value: !Sub 's3://${ConfigBucket}/${ConfigFilePath}'
  ApiDomain:
    Description: The CNAME to which the domain name should point
    Value: !GetAtt CloudFrontDistribution.DomainName
